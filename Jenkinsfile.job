pipeline {
    stage('configure env'){
        sh """
        kubectl config use-context test
        """
    }

    stage('fetch project'){
        git branch: 'master', credentialsId: '<jenkins_git_creds>', url: 'https://github.com/savvagen/locus-k8s-demo-project.git'
    }

    stage('deploy namespace'){
        sh 'kubectl apply -f deploy/kubernetes/locust/namespace_config.yml'
        sh """
        kubectl create configmap tests --from-file ./ --namespace=locust
        kubectl create configmap locust-scenarios --from-file locust_scenarios --namespace=locust
        kubectl create configmap taurus-configs --from-file taurus_configs --namespace locust
        kubectl create configmap hooks --from-file listeners --namespace locust
        """
    }

    stage('run performance tests'){
        catchError {
            sh """
            ./run_job.sh
            """
            sh """
            ls reports
            ls artifacts
            echo "Locust Output:"
            cat artifacts/locust.log
            """
        }
        // try {
        //     sh """
        //     ./run_job.sh
        //     """
        // } catch (e) {
        //     echo 'Load Test failed with reason: \n' + e
        //     throw e
        //     error 'Load Test failed with reason: ' + e
        // }

    }

    stage('generate performance report'){
        perfReport excludeResponseTime: true,
        filterRegex: '',
        modePerformancePerTestCase: true,
        modeThroughput: true,
        percentiles: '0,10,20,30,40,50,90,100',
        sourceDataFiles: 'reports/locust-report.xml'

    }


    stage('generate test report html'){
        step([$class: 'ArtifactArchiver', artifacts: 'reports/*.xml, reports/*.csv, reports/*.html, reports/*.txt, reports/*.log'])
        step([$class: 'ArtifactArchiver', artifacts: 'artifacts/*.xml, artifacts/*.csv, artifacts/*.html, artifacts/*.txt, artifacts/*.log'])

        publishHTML([
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : './test_artifacts',
            reportFiles          : 'test-report.html',
            reportName           : 'Test Report',
            reportTitles         : ''])
    }

    stage('clean up namespace'){
        sh """
        kubectl delete configmap test -n locust
        kubectl delete configmap locust-scenarios -n locust
        kubectl delete configmap taurus-configs -n locust
        kubectl delete configmap hooks -n locust
        kubectl delete jobs locust-taurus-job -n locust
        """
    }

}